openapi: 3.1.0
info:
  title: BDUI API
  version: 1.0.0
  description: |
    Спецификация OpenAPI для Backend-Driven UI  приложения

tags:
  - name: ClientEngine
    description: Операции с экранами для выдачи клиенту

paths:
  /v1/screen/render:
    post:
      summary: Получить экран с данными для отрисовки
      tags: [ClientEngine]
      parameters:
        - in: header
          name: userId
          description: 'Идентификатор пользователя, от которого выполняется запрос'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenRenderRequest'

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponse'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponseError'

  /v1/screen/renderById:
    post:
      summary: Получить экран с данными для отрисовки по идентификатору экрана и версии
      tags: [ClientEngine]
      parameters:
        - in: header
          name: userId
          description: 'Идентификатор пользователя, от которого выполняется запрос'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenRenderRequestById'

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponse'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponseError'

  /v1/screen/action:
    post:
      summary: Отвечает за выполнение действий
      tags: [ClientEngine]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenDoActionRequest'

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoActionResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoActionResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoActionResponseError'

components:
  schemas:
    ScreenRenderRequest:
      description: Запрос на отрисовку экрана
      type: object
      required: [data]
      properties:
        data:
          required: [screenName]
          properties:
            screenName:
              type: string
              description: 'Название экрана'
            variables:
              type: object
              description: 'Дополнительные переменные и их значения'
              additionalProperties: true

    ScreenRenderRequestById:
      description: Запрос на отрисовку экрана
      type: object
      required: [data]
      properties:
        data:
          required: [screenId, versionId]
          properties:
            screenId:
              type: string
              format: uuid
              description: 'Идентификатор экрана'
            versionId:
              type: string
              format: uuid
              description: 'Идентификатор версии'
            variables:
              type: object
              description: 'Дополнительные переменные и их значения для рендеринга экрана'
              additionalProperties: true

    RenderedScreenResponse:
      description: 'Ответ на рендеринг экрана: успех или список ошибок.'
      oneOf:
        - $ref: '#/components/schemas/RenderedScreenResponseSuccess'
        - $ref: '#/components/schemas/RenderedScreenResponseError'
      unevaluatedProperties: false

    RenderedScreenResponseSuccess:
      type: object
      required: [screen]
      properties:
        screen:
          $ref: '#/components/schemas/RenderedScreen'
      additionalProperties: false

    RenderedScreenResponseError:
      type: object
      required: [errors]
      properties:
        errors:
          type: array
          items:
            $ref: './admin.yaml#/components/schemas/ErrorContent'
      additionalProperties: false

    ScreenDoActionRequest:
      description: Запрос на выполнение действий
      type: object
      required: [actions]
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ActionRequest'

    ActionRequest:
      required: [type]
      description: 'Запрос на выполнения действия'
      oneOf:
        - $ref: '#/components/schemas/CommandActionRequest'
        - $ref: '#/components/schemas/UpdateScreenActionRequest'
        - $ref: '#/components/schemas/NavigateToActionRequest'
        - $ref: '#/components/schemas/NavigateBackActionRequest'
        - $ref: '#/components/schemas/NavigateToBottomSheetActionRequest'
      discriminator:
        propertyName: type
        mapping:
          command: '#/components/schemas/CommandActionRequest'
          updateScreen: '#/components/schemas/UpdateScreenActionRequest'
          navigateTo: '#/components/schemas/NavigateToActionRequest'
          navigateBack: '#/components/schemas/NavigateBackActionRequest'
          navigateToBottomSheet: '#/components/schemas/NavigateToBottomSheetActionRequest'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    UpdateScreenActionRequest:
      type: object
      required: [type, screenName, screen]
      properties:
        type:
          const: updateScreen
        screenName:
          type: string
          description: 'Название экрана'
        topBar:
          type: object
          description: 'Данные топ бара'
          required: [hashNode]
          properties:
            hashNode:
              $ref: '#/components/schemas/HashNode'
        bottomBar:
          type: object
          description: 'Данные боттом бара'
          required: [hashNode]
          properties:
            hashNode:
              $ref: '#/components/schemas/HashNode'

        screen:
          type: object
          description: 'Данные экрана'
          required: [hashes]
          properties:
            hashes:
              type: array
              items:
                $ref: '#/components/schemas/HashNode'
        screenNavigationParams:
          description: 'Передаваемые параметры для обновления экрана'
          additionalProperties: true

    CommandActionRequest:
      type: object
      required: [type, name]
      properties:
        type:
          const: command
        name:
          type: string
          description: 'Название команды'
        params:
          description: 'Передаваемые параметры для исполнения команды'
          additionalProperties: true

    NavigateToActionRequest:
      type: object
      required: [type, screenName]
      properties:
        type:
          const: navigateTo
        screenName:
          type: string
          description: 'Название экрана'
        screenNavigationParams:
          description: 'Параметры, используемые при навигации/получении экрана'
          additionalProperties: true

    NavigateBackActionRequest:
      type: object
      required: [type, updatePreviousScreen]
      properties:
        type:
          const: navigateBack
        updatePreviousScreen:
          type: boolean
          description: 'Нужно ли обновлять предыдущий экран, переход на который осуществляется'

    NavigateToBottomSheetActionRequest:
      type: object
      required: [type, screenName]
      properties:
        type:
          const: navigateToBottomSheet
        screenName:
          type: string
          description: 'Название экрана с bottomSheet'
        screenNavigationParams:
          description: 'Передаваемые параметры для исполнения команды'
          additionalProperties: true

    HashNode:
      type: object
      required: [id, hash]
      properties:
        id:
          type: string
          description: 'Идентификатор компонента'
        hash:
          type: string
          description: 'Хэш значение компонента'
        children:
          type: array
          items:
            $ref: '#/components/schemas/HashNode'

    DoActionResponseSuccess:
      type: object
      required: [responses]
      properties:
        responses:
          type: array
          items:
            $ref: '#/components/schemas/ActionResponse'
      additionalProperties: false

    DoActionResponseError:
      type: object
      required: [errors]
      properties:
        errors:
          type: array
          items:
            $ref: './admin.yaml#/components/schemas/ErrorContent'
      additionalProperties: false

    ActionResponse:
      required: [type]
      description: 'Ответ на выполнения действия'
      oneOf:
        - $ref: '#/components/schemas/CommandActionResponse'
        - $ref: '#/components/schemas/UpdateScreenActionResponse'
      discriminator:
        propertyName: type
        mapping:
          command: '#/components/schemas/CommandActionResponse'
          updateScreen: '#/components/schemas/UpdateScreenActionResponse'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    UpdateScreenActionResponse:
      type: object
      required: [type, response]
      properties:
        type:
          const: updateScreen
        response:
          type: object
          description: 'Ответ на обновление экрана'
          required: [screen]
          properties:
            screen:
              type: array
              items:
                type: object
                required: [target, method]
                properties:
                  target:
                    type: string
                  method:
                    type: string
                    enum: [update, insert, delete]
                  content:
                    $ref: '#/components/schemas/RenderedComponent'
            topBar:
              type: array
              items:
                type: object
                required: [target, method]
                properties:
                  target:
                    type: string
                  method:
                    type: string
                    enum: [update, insert, delete]
                  content:
                    $ref: '#/components/schemas/RenderedComponent'
            bottomBar:
              type: array
              items:
                type: object
                required: [target, method]
                properties:
                  target:
                    type: string
                  method:
                    type: string
                    enum: [update, insert, delete]
                  content:
                    $ref: '#/components/schemas/RenderedComponent'

    CommandActionResponse:
      type: object
      required: [type, name, response]
      properties:
        type:
          const: command
        name:
          type: string
          description: 'Название команды'
        response:
          type: object
          description: 'Ответ на выполнение команды'
          required: [data]
          properties:
            data:
              type: object
              properties:
                component:
                  $ref: '#/components/schemas/RenderedComponent'
                fallbackMessage:
                  type: string
                  description: 'Сообщение об ошибке, в случае неудачного исполнения команды'

    RenderedScreen:
      type: object
      required: [screenName, version, components]
      properties:
        screenName:
          type: string
        version:
          type: integer
        localStates:
          additionalProperties: true
          description: 'Описание значений локального состояния экрана'
        components:
          type: array
          items:
            $ref: '#/components/schemas/RenderedComponent'
        scaffold:
          $ref: '#/components/schemas/RenderedScaffold'
      additionalProperties: false

    RenderedScaffold:
      type: object
      properties:
        topBar:
          $ref: '#/components/schemas/RenderedComponent'
        bottomBar:
          $ref: '#/components/schemas/RenderedComponent'
      additionalProperties: false

    RenderedTextStyle:
      type: object
      required: [size, lineHeight]
      properties:
        decoration:
          $ref: './admin.yaml#/components/schemas/TextDecorationType'
        weight:
          type: integer
        size:
          type: integer
        lineHeight:
          type: integer
      additionalProperties: false

    RenderedColorStyle:
      type: object
      required: [hex]
      properties:
        hex:
          type: string
          description: 'Цвет в HEX формате (#RRGGBB)'
      additionalProperties: false

    RenderedStyledTextRepresentation:
      type: object
      required: [text, colorStyle, textStyle]
      properties:
        text:
          type: string
        textStyle:
          $ref: '#/components/schemas/RenderedTextStyle'
        colorStyle:
          $ref: '#/components/schemas/RenderedColorStyle'
        textAlignment:
          type: string
          enum: [start, center, end]

    RenderedInsets:
      type: object
      required: [start, end, bottom, top]
      properties:
        start: { type: integer, default: 0 }
        end: { type: integer, default: 0 }
        bottom: { type: integer, default: 0 }
        top: { type: integer, default: 0 }
      additionalProperties: false

    RenderedAction:
      required: [type]
      description: 'Вызываемое действие при взаимодействии'
      oneOf:
        - $ref: '#/components/schemas/RenderedCommandAction'
        - $ref: '#/components/schemas/RenderedUpdateScreenAction'
        - $ref: '#/components/schemas/RenderedNavigateToAction'
        - $ref: '#/components/schemas/RenderedNavigateBackAction'
        - $ref: '#/components/schemas/RenderedSetLocalStateAction'
        - $ref: '#/components/schemas/RenderedSetLocalStateFromInputAction'
        - $ref: '#/components/schemas/RenderedNavigateToBottomSheetAction'
      discriminator:
        propertyName: type
        mapping:
          command: '#/components/schemas/RenderedCommandAction'
          updateScreen: '#/components/schemas/RenderedUpdateScreenAction'
          navigateTo: '#/components/schemas/RenderedNavigateToAction'
          navigateBack: '#/components/schemas/RenderedNavigateBackAction'
          navigateToBottomSheet: '#/components/schemas/RenderedNavigateToBottomSheetAction'
          setLocalState: '#/components/schemas/RenderedSetLocalStateAction'
          setLocalStateFromInput: '#/components/schemas/RenderedSetLocalStateFromInputAction'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    RenderedCommandAction:
      type: object
      required: [type, name]
      properties:
        type:
          const: command
        name:
          type: string
          description: 'Название команды, которую нужно исполнить'
        params:
          description: 'Передаваемые параметры для исполнения команды'
          additionalProperties: true

    RenderedUpdateScreenAction:
      type: object
      required: [type, screenName]
      properties:
        type:
          const: updateScreen
        screenName:
          type: string
          description: 'Название экрана'
        screenNavigationParams:
          description: 'Передаваемые параметры для исполнения команды'
          additionalProperties: true

    RenderedNavigateToAction:
      type: object
      required: [type, screenName]
      properties:
        type:
          const: navigateTo
        screenName:
          type: string
          description: 'Название экрана'
        screenNavigationParams:
          description: 'Передаваемые параметры для исполнения команды'
          additionalProperties: true

    RenderedNavigateBackAction:
      type: object
      required: [type]
      properties:
        type:
          const: navigateBack

    RenderedNavigateToBottomSheetAction:
      type: object
      required: [type, screenName]
      properties:
        type:
          const: navigateToBottomSheet
        screenName:
          type: string
          description: 'Название экрана с bottomSheet'
        screenNavigationParams:
          description: 'Передаваемые параметры для исполнения команды'
          additionalProperties: true

    RenderedSetLocalStateFromInputAction:
      type: object
      required: [type, target]
      properties:
        type:
          const: setLocalStateFromInput
        target:
          type: string
          description: 'Путь куда нужно установить значение'

    RenderedSetLocalStateAction:
      type: object
      required: [type, target, value]
      properties:
        type:
          const: setLocalState
        target:
          type: string
          description: 'Путь куда нужно установить значение'
        value:
          description: 'Любое JSON значение'

    RenderedInteraction:
      type: object
      description: Базовая модель взаимодействия.
      required: [type, actions]
      properties:
        type:
          type: string
          enum: [onClick, onShow]
        actions:
          type: array
          items:
            $ref: '#/components/schemas/RenderedAction'
      additionalProperties: true

    RenderedSize:
      required: [type]
      description: 'Полиморфный размер'
      oneOf:
        - $ref: '#/components/schemas/RenderedSizeFixed'
        - $ref: '#/components/schemas/RenderedSizeWeighted'
        - $ref: '#/components/schemas/RenderedSizeMatchParent'
        - $ref: '#/components/schemas/RenderedSizeWrapContent'
      discriminator:
        propertyName: type
        mapping:
          fixed: '#/components/schemas/RenderedSizeFixed'
          weighted: '#/components/schemas/RenderedSizeWeighted'
          matchParent: '#/components/schemas/RenderedSizeMatchParent'
          wrapContent: '#/components/schemas/RenderedSizeWrapContent'
      properties:
        type:
          type: string
          description: 'Допустимые значения: fixed, weighted, matchParent, wrapContent'
      unevaluatedProperties: false

    RenderedSizeBase:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [fixed, weighted, matchParent, wrapContent]

    RenderedSizeFixed:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [type, value]
          properties:
            type:
              const: fixed
            value:
              type: integer

    RenderedSizeWeighted:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [type, fraction]
          properties:
            type:
              const: weighted
            fraction:
              type: number

    RenderedSizeMatchParent:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [type]
          properties:
            type:
              const: matchParent
      additionalProperties: false

    RenderedSizeWrapContent:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [type]
          properties:
            type:
              const: wrapContent
      additionalProperties: false

    RenderedHorizontalArrangement:
      required: [type]
      description: 'Расположение элементов по горизонтали'
      oneOf:
        - $ref: '#/components/schemas/RenderedHorizontalArrangementStart'
        - $ref: '#/components/schemas/RenderedHorizontalArrangementEnd'
        - $ref: '#/components/schemas/RenderedHorizontalArrangementCenter'
        - $ref: '#/components/schemas/RenderedHorizontalArrangementSpaceBetween'
        - $ref: '#/components/schemas/RenderedHorizontalArrangementSpaceEvenly'
        - $ref: '#/components/schemas/RenderedHorizontalArrangementSpaceAround'
      discriminator:
        propertyName: type
        mapping:
          start: '#/components/schemas/RenderedHorizontalArrangementStart'
          end: '#/components/schemas/RenderedHorizontalArrangementEnd'
          center: '#/components/schemas/RenderedHorizontalArrangementCenter'
          spaceBetween: '#/components/schemas/RenderedHorizontalArrangementSpaceBetween'
          spaceEvenly: '#/components/schemas/RenderedHorizontalArrangementSpaceEvenly'
          spaceAround: '#/components/schemas/RenderedHorizontalArrangementSpaceAround'
      properties:
        type:
          type: string
          description: 'Допустимые значения: start, end, center, spaceBetween, spaceEvenly, spaceAround'
      unevaluatedProperties: false

    RenderedHorizontalArrangementBase:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [start, end, center, spaceBetween, spaceEvenly, spaceAround]

    RenderedHorizontalArrangementStart:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: start
      additionalProperties: false

    RenderedHorizontalArrangementEnd:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: end
      additionalProperties: false

    RenderedHorizontalArrangementSpaceBetween:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: spaceBetween
      additionalProperties: false

    RenderedHorizontalArrangementSpaceEvenly:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: spaceEvenly
      additionalProperties: false

    RenderedHorizontalArrangementSpaceAround:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: spaceAround
      additionalProperties: false

    RenderedHorizontalArrangementCenter:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: center
      additionalProperties: false

    RenderedVerticalArrangement:
      required: [type]
      description: 'Расположение элементов по вертикали'
      oneOf:
        - $ref: '#/components/schemas/RenderedVerticalArrangementTop'
        - $ref: '#/components/schemas/RenderedVerticalArrangementBottom'
        - $ref: '#/components/schemas/RenderedVerticalArrangementCenter'
        - $ref: '#/components/schemas/RenderedVerticalArrangementSpaceBetween'
        - $ref: '#/components/schemas/RenderedVerticalArrangementSpaceEvenly'
        - $ref: '#/components/schemas/RenderedVerticalArrangementSpaceAround'
      discriminator:
        propertyName: type
        mapping:
          top: '#/components/schemas/RenderedVerticalArrangementTop'
          bottom: '#/components/schemas/RenderedVerticalArrangementBottom'
          center: '#/components/schemas/RenderedVerticalArrangementCenter'
          spaceBetween: '#/components/schemas/RenderedVerticalArrangementSpaceBetween'
          spaceEvenly: '#/components/schemas/RenderedVerticalArrangementSpaceEvenly'
          spaceAround: '#/components/schemas/RenderedVerticalArrangementSpaceAround'
      properties:
        type:
          type: string
          description: 'Допустимые значения: top, bottom, center, spaceBetween, spaceEvenly, spaceAround'
      unevaluatedProperties: false

    RenderedVerticalArrangementBase:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [top, bottom, center, spaceBetween, spaceEvenly, spaceAround]

    RenderedVerticalArrangementTop:
      allOf:
        - $ref: '#/components/schemas/RenderedVerticalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: top
      additionalProperties: false

    RenderedVerticalArrangementBottom:
      allOf:
        - $ref: '#/components/schemas/RenderedVerticalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: bottom
      additionalProperties: false

    RenderedVerticalArrangementSpaceBetween:
      allOf:
        - $ref: '#/components/schemas/RenderedVerticalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: spaceBetween
      additionalProperties: false

    RenderedVerticalArrangementSpaceEvenly:
      allOf:
        - $ref: '#/components/schemas/RenderedVerticalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: spaceEvenly
      additionalProperties: false

    RenderedVerticalArrangementSpaceAround:
      allOf:
        - $ref: '#/components/schemas/RenderedVerticalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: spaceAround
      additionalProperties: false

    RenderedVerticalArrangementCenter:
      allOf:
        - $ref: '#/components/schemas/RenderedVerticalArrangementBase'
        - type: object
          required: [type]
          properties:
            type:
              const: center
      additionalProperties: false

    RenderedHorizontalAndVerticalAlignment:
      required: [type]
      description: 'Выравнивание элементов'
      oneOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalTopStart'
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalTopCenter'
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalTopEnd'
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalCenterStart'
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalCenter'
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalCenterEnd'
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalBottomStart'
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalBottomCenter'
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalBottomEnd'
      discriminator:
        propertyName: type
        mapping:
          topStart: '#/components/schemas/RenderedHorizontalAndVerticalTopStart'
          topCenter: '#/components/schemas/RenderedHorizontalAndVerticalTopCenter'
          topEnd: '#/components/schemas/RenderedHorizontalAndVerticalTopEnd'
          centerStart: '#/components/schemas/RenderedHorizontalAndVerticalCenterStart'
          center: '#/components/schemas/RenderedHorizontalAndVerticalCenter'
          centerEnd: '#/components/schemas/RenderedHorizontalAndVerticalCenterEnd'
          bottomStart: '#/components/schemas/RenderedHorizontalAndVerticalBottomStart'
          bottomCenter: '#/components/schemas/RenderedHorizontalAndVerticalBottomCenter'
          bottomEnd: '#/components/schemas/RenderedHorizontalAndVerticalBottomEnd'
      properties:
        type:
          type: string
          description: 'Допустимые значения: topStart, topCenter, topEnd, centerStart, center, centerEnd, bottomStart, bottomCenter, bottomEnd'
      unevaluatedProperties: false

    RenderedHorizontalAndVerticalAlignmentBase:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum:
            [
              topStart,
              topCenter,
              topEnd,
              centerStart,
              center,
              centerEnd,
              bottomStart,
              bottomCenter,
              bottomEnd
            ]

    RenderedHorizontalAndVerticalTopStart:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: topStart
      additionalProperties: false

    RenderedHorizontalAndVerticalTopCenter:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: topCenter
      additionalProperties: false

    RenderedHorizontalAndVerticalTopEnd:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: topEnd
      additionalProperties: false

    RenderedHorizontalAndVerticalCenterStart:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: centerStart
      additionalProperties: false

    RenderedHorizontalAndVerticalCenter:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: center
      additionalProperties: false

    RenderedHorizontalAndVerticalCenterEnd:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: centerEnd
      additionalProperties: false

    RenderedHorizontalAndVerticalBottomStart:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: bottomStart
      additionalProperties: false

    RenderedHorizontalAndVerticalBottomCenter:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: bottomCenter
      additionalProperties: false

    RenderedHorizontalAndVerticalBottomEnd:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: bottomEnd
      additionalProperties: false

    RenderedVerticalAlignment:
      required: [type]
      description: 'Выравнивание элементов по вертикали'
      oneOf:
        - $ref: '#/components/schemas/RenderedVerticalAlignmentTop'
        - $ref: '#/components/schemas/RenderedVerticalAlignmentBottom'
        - $ref: '#/components/schemas/RenderedVerticalAlignmentCenter'
      discriminator:
        propertyName: type
        mapping:
          top: '#/components/schemas/RenderedVerticalAlignmentTop'
          bottom: '#/components/schemas/RenderedVerticalAlignmentBottom'
          center: '#/components/schemas/RenderedVerticalAlignmentCenter'
      properties:
        type:
          type: string
          description: 'Допустимые значения: top, bottom, center'
      unevaluatedProperties: false

    RenderedVerticalAlignmentBase:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [top, bottom, center]

    RenderedVerticalAlignmentTop:
      allOf:
        - $ref: '#/components/schemas/RenderedVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: top
      additionalProperties: false

    RenderedVerticalAlignmentBottom:
      allOf:
        - $ref: '#/components/schemas/RenderedVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: bottom
      additionalProperties: false

    RenderedVerticalAlignmentCenter:
      allOf:
        - $ref: '#/components/schemas/RenderedVerticalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: center
      additionalProperties: false

    RenderedHorizontalAlignment:
      required: [type]
      description: 'Выравнивание элементов по горизонтали'
      oneOf:
        - $ref: '#/components/schemas/RenderedHorizontalAlignmentStart'
        - $ref: '#/components/schemas/RenderedHorizontalAlignmentEnd'
        - $ref: '#/components/schemas/RenderedHorizontalAlignmentCenter'
      discriminator:
        propertyName: type
        mapping:
          start: '#/components/schemas/RenderedHorizontalAlignmentStart'
          end: '#/components/schemas/RenderedHorizontalAlignmentEnd'
          center: '#/components/schemas/RenderedHorizontalAlignmentCenter'
      properties:
        type:
          type: string
          description: 'Допустимые значения: start, end, center'
      unevaluatedProperties: false

    RenderedHorizontalAlignmentBase:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [start, end, center]

    RenderedHorizontalAlignmentStart:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: start
      additionalProperties: false

    RenderedHorizontalAlignmentEnd:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: end
      additionalProperties: false

    RenderedHorizontalAlignmentCenter:
      allOf:
        - $ref: '#/components/schemas/RenderedHorizontalAlignmentBase'
        - type: object
          required: [type]
          properties:
            type:
              const: center
      additionalProperties: false

    RenderedComponent:
      required: [type]
      description: 'Полиморфный UI-компонент'
      oneOf:
        - $ref: '#/components/schemas/RenderedRow'
        - $ref: '#/components/schemas/RenderedBox'
        - $ref: '#/components/schemas/RenderedColumn'
        - $ref: '#/components/schemas/RenderedText'
        - $ref: '#/components/schemas/RenderedInput'
        - $ref: '#/components/schemas/RenderedImage'
        - $ref: '#/components/schemas/RenderedSpacer'
        - $ref: '#/components/schemas/RenderedProgressBar'
        - $ref: '#/components/schemas/RenderedSwitch'
        - $ref: '#/components/schemas/RenderedButton'
      discriminator:
        propertyName: type
        mapping:
          row: '#/components/schemas/RenderedRow'
          box: '#/components/schemas/RenderedBox'
          column: '#/components/schemas/RenderedColumn'
          text: '#/components/schemas/RenderedText'
          input: '#/components/schemas/RenderedInput'
          image: '#/components/schemas/RenderedImage'
          spacer: '#/components/schemas/RenderedSpacer'
          progressBar: '#/components/schemas/RenderedProgressBar'
          switch: '#/components/schemas/RenderedSwitch'
          button: '#/components/schemas/RenderedButton'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    RenderedComponentBase:
      type: object
      required: [id, hash, type, interactions, width, height]
      properties:
        id:
          type: string
        hash:
          type: string
        type:
          type: string
        interactions:
          type: array
          items:
            $ref: '#/components/schemas/RenderedInteraction'
        paddings:
          $ref: '#/components/schemas/RenderedInsets'
        margins:
          $ref: '#/components/schemas/RenderedInsets'
        width:
          $ref: '#/components/schemas/RenderedSize'
        height:
          $ref: '#/components/schemas/RenderedSize'
        backgroundColor:
          $ref: '#/components/schemas/RenderedColorStyle'
        border:
          $ref: '#/components/schemas/RenderedBorder'
        shape:
          $ref: '#/components/schemas/RenderedShape'

    RenderedCompositeBase:
      allOf:
        - $ref: '#/components/schemas/RenderedComponentBase'
        - type: object
          required: [children]
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/RenderedComponent'
          additionalProperties: false

    RenderedLeafBase:
      allOf:
        - $ref: '#/components/schemas/RenderedComponentBase'
        - type: object
          required: [type]

    RenderedRow:
      allOf:
        - $ref: '#/components/schemas/RenderedCompositeBase'
        - type: object
          required: [type]
          properties:
            type: { const: row }
            isScrollable:
              type: boolean
            horizontalArrangement:
              $ref: '#/components/schemas/RenderedHorizontalArrangement'
            verticalAlignment:
              $ref: '#/components/schemas/RenderedVerticalAlignment'

    RenderedBox:
      allOf:
        - $ref: '#/components/schemas/RenderedCompositeBase'
        - type: object
          required: [type]
          properties:
            type: { const: box }
            contentAlignment:
              $ref: '#/components/schemas/RenderedHorizontalAndVerticalAlignment'

    RenderedColumn:
      allOf:
        - $ref: '#/components/schemas/RenderedCompositeBase'
        - type: object
          required: [type]
          properties:
            type: { const: column }
            verticalArrangement:
              $ref: '#/components/schemas/RenderedVerticalArrangement'
            horizontalAlignment:
              $ref: '#/components/schemas/RenderedHorizontalAlignment'

    RenderedText:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [type, textWithStyle]
          properties:
            type: { const: text }
            textWithStyle:
              $ref: '#/components/schemas/RenderedStyledTextRepresentation'

    RenderedInput:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [type, textWithStyle]
          properties:
            type:
              const: input
            textWithStyle:
              $ref: '#/components/schemas/RenderedStyledTextRepresentation'
            mask:
              type: string
              enum: [phone]
            rightIcon:
              $ref: '#/components/schemas/RenderedImage'
            regex:
              $ref: '#/components/schemas/RenderedRegex'
            placeholder:
              $ref: '#/components/schemas/RenderedPlaceholder'
            hint:
              $ref: '#/components/schemas/RenderedHint'
          additionalProperties: false

    RenderedPlaceholder:
      type: object
      required: [textWithStyle]
      properties:
        textWithStyle:
          $ref: '#/components/schemas/RenderedStyledTextRepresentation'
      additionalProperties: false

    RenderedHint:
      type: object
      required: [textWithStyle]
      properties:
        textWithStyle:
          $ref: '#/components/schemas/RenderedStyledTextRepresentation'
      additionalProperties: false

    RenderedRegex:
      type: string
      enum: [email]

    RenderedImage:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [type, imageUrl]
          properties:
            type: { const: image }
            imageUrl:
              type: string
            badge:
              $ref: '#/components/schemas/RenderedBadge'

    RenderedSpacer:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [type]
          properties:
            type: { const: spacer }

    RenderedProgressBar:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [type]
          properties:
            type: { const: progressBar }

    RenderedSwitch:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [type]
          properties:
            type: { const: switch }

    RenderedButton:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [type, text, enabled]
          properties:
            type: { const: button }
            text:
              $ref: '#/components/schemas/RenderedText'
            enabled:
              type: boolean
              default: true

    RenderedBadge:
      required: [type]
      oneOf:
        - $ref: '#/components/schemas/RenderedBadgeWithImage'
        - $ref: '#/components/schemas/RenderedBadgeWithText'
      discriminator:
        propertyName: type
        mapping:
          badgeWithImage: '#/components/schemas/RenderedBadgeWithImage'
          badgeWithText: '#/components/schemas/RenderedBadgeWithText'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    RenderedBadgeBase:
      type: object
      required: [type]
      properties:
        type:
          type: string

    RenderedBadgeWithImage:
      allOf:
        - $ref: '#/components/schemas/RenderedBadgeBase'
        - type: object
          required: [type, imageUrl]
          properties:
            type: { const: badgeWithImage }
            imageUrl:
              type: string

    RenderedBadgeWithText:
      allOf:
        - $ref: '#/components/schemas/RenderedBadgeBase'
        - type: object
          required: [type, textWithStyle]
          properties:
            type: { const: badgeWithText }
            textWithStyle:
              $ref: '#/components/schemas/RenderedStyledTextRepresentation'

    RenderedBorder:
      type: object
      required: [color, thickness]
      properties:
        color:
          $ref: '#/components/schemas/RenderedColorStyle'
        thickness:
          type: integer

    RenderedShape:
      type: object
      required: [type, topLeft, topRight, bottomLeft, bottomRight]
      properties:
        type:
          type: string
          enum: [roundedCorners]
        topRight:
          type: integer
          default: 0
        topLeft:
          type: integer
          default: 0
        bottomRight:
          type: integer
          default: 0
        bottomLeft:
          type: integer
          default: 0
