/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * BDUI API
 * –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è OpenAPI –¥–ª—è Backend-Driven UI  –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  DoActionResponseError,
  DoActionResponseSuccess,
  RenderedScreenResponse,
  RenderedScreenResponseError,
  ScreenDoActionRequest,
  ScreenRenderRequest,
  ScreenRenderRequestById
} from '../models';

import { getInstance } from '../../../../src/utils/api/instance';
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Ä–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
 */
export const postV1ScreenRender = (
  screenRenderRequest: ScreenRenderRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<RenderedScreenResponse>(
    {
      url: `/v1/screen/render`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: screenRenderRequest,
      signal
    },
    options
  );
};

export const getPostV1ScreenRenderMutationOptions = <
  TError = RenderedScreenResponseError | RenderedScreenResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ScreenRender>>,
    TError,
    { data: ScreenRenderRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ScreenRender>>,
  TError,
  { data: ScreenRenderRequest },
  TContext
> => {
  const mutationKey = ['postV1ScreenRender'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ScreenRender>>,
    { data: ScreenRenderRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ScreenRender(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ScreenRenderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ScreenRender>>
>;
export type PostV1ScreenRenderMutationBody = ScreenRenderRequest;
export type PostV1ScreenRenderMutationError =
  | RenderedScreenResponseError
  | RenderedScreenResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Ä–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
 */
export const usePostV1ScreenRender = <
  TError = RenderedScreenResponseError | RenderedScreenResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ScreenRender>>,
      TError,
      { data: ScreenRenderRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ScreenRender>>,
  TError,
  { data: ScreenRenderRequest },
  TContext
> => {
  const mutationOptions = getPostV1ScreenRenderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Ä–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —ç–∫—Ä–∞–Ω–∞ –∏ –≤–µ—Ä—Å–∏–∏
 */
export const postV1ScreenRenderById = (
  screenRenderRequestById: ScreenRenderRequestById,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<RenderedScreenResponse>(
    {
      url: `/v1/screen/renderById`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: screenRenderRequestById,
      signal
    },
    options
  );
};

export const getPostV1ScreenRenderByIdMutationOptions = <
  TError = RenderedScreenResponseError | RenderedScreenResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ScreenRenderById>>,
    TError,
    { data: ScreenRenderRequestById },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ScreenRenderById>>,
  TError,
  { data: ScreenRenderRequestById },
  TContext
> => {
  const mutationKey = ['postV1ScreenRenderById'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ScreenRenderById>>,
    { data: ScreenRenderRequestById }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ScreenRenderById(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ScreenRenderByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ScreenRenderById>>
>;
export type PostV1ScreenRenderByIdMutationBody = ScreenRenderRequestById;
export type PostV1ScreenRenderByIdMutationError =
  | RenderedScreenResponseError
  | RenderedScreenResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Ä–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —ç–∫—Ä–∞–Ω–∞ –∏ –≤–µ—Ä—Å–∏–∏
 */
export const usePostV1ScreenRenderById = <
  TError = RenderedScreenResponseError | RenderedScreenResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ScreenRenderById>>,
      TError,
      { data: ScreenRenderRequestById },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ScreenRenderById>>,
  TError,
  { data: ScreenRenderRequestById },
  TContext
> => {
  const mutationOptions = getPostV1ScreenRenderByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
 */
export const postV1ScreenAction = (
  screenDoActionRequest: ScreenDoActionRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<DoActionResponseSuccess>(
    {
      url: `/v1/screen/action`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: screenDoActionRequest,
      signal
    },
    options
  );
};

export const getPostV1ScreenActionMutationOptions = <
  TError = DoActionResponseError | DoActionResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ScreenAction>>,
    TError,
    { data: ScreenDoActionRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ScreenAction>>,
  TError,
  { data: ScreenDoActionRequest },
  TContext
> => {
  const mutationKey = ['postV1ScreenAction'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ScreenAction>>,
    { data: ScreenDoActionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ScreenAction(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ScreenActionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ScreenAction>>
>;
export type PostV1ScreenActionMutationBody = ScreenDoActionRequest;
export type PostV1ScreenActionMutationError = DoActionResponseError | DoActionResponseError;

/**
 * @summary –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
 */
export const usePostV1ScreenAction = <
  TError = DoActionResponseError | DoActionResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ScreenAction>>,
      TError,
      { data: ScreenDoActionRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ScreenAction>>,
  TError,
  { data: ScreenDoActionRequest },
  TContext
> => {
  const mutationOptions = getPostV1ScreenActionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
