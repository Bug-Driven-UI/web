/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * BDUI API
 * –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è OpenAPI –¥–ª—è Backend-Driven UI  –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  APIDeleteRequest,
  APIDeleteResponseError,
  APIDeleteResponseSuccess,
  APINamesRequest,
  APINamesResponseError,
  APINamesResponseSuccess,
  APIRequest,
  APIResponseError,
  APIResponseSuccess,
  APISaveResponseError,
  APISaveResponseSuccess,
  APIUpdateRequest,
  APIUpdateResponseError,
  APIUpdateResponseSuccess,
  ApiRepresentationForSave,
  ColorStyleDeleteRequest,
  ColorStyleDeleteResponseError,
  ColorStyleDeleteResponseSuccess,
  ColorStyleRequest,
  ColorStyleResponseError,
  ColorStyleResponseSuccess,
  ColorStyleSaveRequest,
  ColorStyleSaveResponseError,
  ColorStyleSaveResponseSuccess,
  ColorStyleUpdateRequest,
  ColorStyleUpdateResponseError,
  ColorStyleUpdateResponseSuccess,
  ColorStylesByTokenRequest,
  ColorStylesByTokenResponseError,
  ColorStylesByTokenResponseSuccess,
  CommandDeleteRequest,
  CommandDeleteResponseError,
  CommandDeleteResponseSuccess,
  CommandRequest,
  CommandResponseError,
  CommandResponseSuccess,
  CommandSaveRequest,
  CommandSaveResponseError,
  CommandSaveResponseSuccess,
  CommandUpdateRequest,
  CommandUpdateResponseError,
  CommandUpdateResponseSuccess,
  CommandsByNameRequest,
  CommandsByNameResponseError,
  CommandsByNameResponseSuccess,
  ScreenForSave,
  ScreenNamesRequest,
  ScreenNamesResponseError,
  ScreenNamesResponseSuccess,
  ScreenRequest,
  ScreenResponseError,
  ScreenResponseSuccess,
  ScreenUpdateRequest,
  ScreenUpdateResponseError,
  ScreenUpdateResponseSuccess,
  ScreenVersionRequest,
  ScreenVersionResponseError,
  ScreenVersionResponseSuccess,
  SetProductionVersionRequest,
  SetProductionVersionResponseError,
  SetProductionVersionResponseSuccess,
  TemplateDeleteRequest,
  TemplateDeleteResponseError,
  TemplateDeleteResponseSuccess,
  TemplateRequest,
  TemplateResponseError,
  TemplateResponseSuccess,
  TemplateSaveRequest,
  TemplateSaveResponseError,
  TemplateSaveResponseSuccess,
  TemplateUpdateRequest,
  TemplateUpdateResponseError,
  TemplateUpdateResponseSuccess,
  TemplatesByNameRequest,
  TemplatesByNameResponseError,
  TemplatesByNameResponseSuccess,
  TextStyleDeleteRequest,
  TextStyleDeleteResponseError,
  TextStyleDeleteResponseSuccess,
  TextStyleRequest,
  TextStyleResponseError,
  TextStyleResponseSuccess,
  TextStyleSaveRequest,
  TextStyleSaveResponseError,
  TextStyleSaveResponseSuccess,
  TextStyleUpdateRequest,
  TextStyleUpdateResponseError,
  TextStyleUpdateResponseSuccess,
  TextStylesByTokenRequest,
  TextStylesByTokenResponseError,
  TextStylesByTokenResponseSuccess
} from '../models';

import { getInstance } from '../../../../src/utils/api/instance';
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —ç–∫—Ä–∞–Ω–æ–≤ –ø–æ query
 */
export const postV1ScreenGetByName = (
  screenNamesRequest: ScreenNamesRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ScreenNamesResponseSuccess>(
    {
      url: `/v1/screen/getByName`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: screenNamesRequest,
      signal
    },
    options
  );
};

export const getPostV1ScreenGetByNameMutationOptions = <
  TError = ScreenNamesResponseError | ScreenNamesResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ScreenGetByName>>,
    TError,
    { data: ScreenNamesRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ScreenGetByName>>,
  TError,
  { data: ScreenNamesRequest },
  TContext
> => {
  const mutationKey = ['postV1ScreenGetByName'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ScreenGetByName>>,
    { data: ScreenNamesRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ScreenGetByName(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ScreenGetByNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ScreenGetByName>>
>;
export type PostV1ScreenGetByNameMutationBody = ScreenNamesRequest;
export type PostV1ScreenGetByNameMutationError =
  | ScreenNamesResponseError
  | ScreenNamesResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —ç–∫—Ä–∞–Ω–æ–≤ –ø–æ query
 */
export const usePostV1ScreenGetByName = <
  TError = ScreenNamesResponseError | ScreenNamesResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ScreenGetByName>>,
      TError,
      { data: ScreenNamesRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ScreenGetByName>>,
  TError,
  { data: ScreenNamesRequest },
  TContext
> => {
  const mutationOptions = getPostV1ScreenGetByNameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π —ç–∫—Ä–∞–Ω–∞
 */
export const postV1ScreenGetVersions = (
  screenVersionRequest: ScreenVersionRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ScreenVersionResponseSuccess>(
    {
      url: `/v1/screen/getVersions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: screenVersionRequest,
      signal
    },
    options
  );
};

export const getPostV1ScreenGetVersionsMutationOptions = <
  TError = ScreenVersionResponseError | ScreenVersionResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ScreenGetVersions>>,
    TError,
    { data: ScreenVersionRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ScreenGetVersions>>,
  TError,
  { data: ScreenVersionRequest },
  TContext
> => {
  const mutationKey = ['postV1ScreenGetVersions'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ScreenGetVersions>>,
    { data: ScreenVersionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ScreenGetVersions(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ScreenGetVersionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ScreenGetVersions>>
>;
export type PostV1ScreenGetVersionsMutationBody = ScreenVersionRequest;
export type PostV1ScreenGetVersionsMutationError =
  | ScreenVersionResponseError
  | ScreenVersionResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π —ç–∫—Ä–∞–Ω–∞
 */
export const usePostV1ScreenGetVersions = <
  TError = ScreenVersionResponseError | ScreenVersionResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ScreenGetVersions>>,
      TError,
      { data: ScreenVersionRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ScreenGetVersions>>,
  TError,
  { data: ScreenVersionRequest },
  TContext
> => {
  const mutationOptions = getPostV1ScreenGetVersionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –°–¥–µ–ª–∞—Ç—å –≤–µ—Ä—Å–∏—é —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ–¥–æ–≤–æ–π
 */
export const postV1ScreenSetProductionVersion = (
  setProductionVersionRequest: SetProductionVersionRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<SetProductionVersionResponseSuccess>(
    {
      url: `/v1/screen/setProductionVersion`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: setProductionVersionRequest,
      signal
    },
    options
  );
};

export const getPostV1ScreenSetProductionVersionMutationOptions = <
  TError = SetProductionVersionResponseError | SetProductionVersionResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ScreenSetProductionVersion>>,
    TError,
    { data: SetProductionVersionRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ScreenSetProductionVersion>>,
  TError,
  { data: SetProductionVersionRequest },
  TContext
> => {
  const mutationKey = ['postV1ScreenSetProductionVersion'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ScreenSetProductionVersion>>,
    { data: SetProductionVersionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ScreenSetProductionVersion(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ScreenSetProductionVersionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ScreenSetProductionVersion>>
>;
export type PostV1ScreenSetProductionVersionMutationBody = SetProductionVersionRequest;
export type PostV1ScreenSetProductionVersionMutationError =
  | SetProductionVersionResponseError
  | SetProductionVersionResponseError;

/**
 * @summary –°–¥–µ–ª–∞—Ç—å –≤–µ—Ä—Å–∏—é —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ–¥–æ–≤–æ–π
 */
export const usePostV1ScreenSetProductionVersion = <
  TError = SetProductionVersionResponseError | SetProductionVersionResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ScreenSetProductionVersion>>,
      TError,
      { data: SetProductionVersionRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ScreenSetProductionVersion>>,
  TError,
  { data: SetProductionVersionRequest },
  TContext
> => {
  const mutationOptions = getPostV1ScreenSetProductionVersionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
 */
export const postV1ScreenGet = (
  screenRequest: ScreenRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ScreenResponseSuccess>(
    {
      url: `/v1/screen/get`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: screenRequest,
      signal
    },
    options
  );
};

export const getPostV1ScreenGetMutationOptions = <
  TError = ScreenResponseError | ScreenResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ScreenGet>>,
    TError,
    { data: ScreenRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ScreenGet>>,
  TError,
  { data: ScreenRequest },
  TContext
> => {
  const mutationKey = ['postV1ScreenGet'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ScreenGet>>,
    { data: ScreenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ScreenGet(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ScreenGetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ScreenGet>>
>;
export type PostV1ScreenGetMutationBody = ScreenRequest;
export type PostV1ScreenGetMutationError = ScreenResponseError | ScreenResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
 */
export const usePostV1ScreenGet = <
  TError = ScreenResponseError | ScreenResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ScreenGet>>,
      TError,
      { data: ScreenRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ScreenGet>>,
  TError,
  { data: ScreenRequest },
  TContext
> => {
  const mutationOptions = getPostV1ScreenGetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å —Å–∫–µ–ª–µ—Ç —ç–∫—Ä–∞–Ω–∞
 */
export const putV1ScreenUpdate = (
  screenUpdateRequest: ScreenUpdateRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<ScreenUpdateResponseSuccess>(
    {
      url: `/v1/screen/update`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: screenUpdateRequest
    },
    options
  );
};

export const getPutV1ScreenUpdateMutationOptions = <
  TError = ScreenUpdateResponseError | ScreenUpdateResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1ScreenUpdate>>,
    TError,
    { data: ScreenUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV1ScreenUpdate>>,
  TError,
  { data: ScreenUpdateRequest },
  TContext
> => {
  const mutationKey = ['putV1ScreenUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV1ScreenUpdate>>,
    { data: ScreenUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putV1ScreenUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1ScreenUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1ScreenUpdate>>
>;
export type PutV1ScreenUpdateMutationBody = ScreenUpdateRequest;
export type PutV1ScreenUpdateMutationError = ScreenUpdateResponseError | ScreenUpdateResponseError;

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å —Å–∫–µ–ª–µ—Ç —ç–∫—Ä–∞–Ω–∞
 */
export const usePutV1ScreenUpdate = <
  TError = ScreenUpdateResponseError | ScreenUpdateResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putV1ScreenUpdate>>,
      TError,
      { data: ScreenUpdateRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putV1ScreenUpdate>>,
  TError,
  { data: ScreenUpdateRequest },
  TContext
> => {
  const mutationOptions = getPutV1ScreenUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
 */
export const postV1ScreenSave = (
  screenForSave: ScreenForSave,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ScreenResponseSuccess>(
    {
      url: `/v1/screen/save`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: screenForSave,
      signal
    },
    options
  );
};

export const getPostV1ScreenSaveMutationOptions = <
  TError = ScreenResponseError | ScreenResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ScreenSave>>,
    TError,
    { data: ScreenForSave },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ScreenSave>>,
  TError,
  { data: ScreenForSave },
  TContext
> => {
  const mutationKey = ['postV1ScreenSave'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ScreenSave>>,
    { data: ScreenForSave }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ScreenSave(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ScreenSaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ScreenSave>>
>;
export type PostV1ScreenSaveMutationBody = ScreenForSave;
export type PostV1ScreenSaveMutationError = ScreenResponseError | ScreenResponseError;

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
 */
export const usePostV1ScreenSave = <
  TError = ScreenResponseError | ScreenResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ScreenSave>>,
      TError,
      { data: ScreenForSave },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ScreenSave>>,
  TError,
  { data: ScreenForSave },
  TContext
> => {
  const mutationOptions = getPostV1ScreenSaveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–µ–µ API
 */
export const postV1ExternalSave = (
  apiRepresentationForSave: ApiRepresentationForSave,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<APISaveResponseSuccess>(
    {
      url: `/v1/external/save`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: apiRepresentationForSave,
      signal
    },
    options
  );
};

export const getPostV1ExternalSaveMutationOptions = <
  TError = APISaveResponseError | APISaveResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ExternalSave>>,
    TError,
    { data: ApiRepresentationForSave },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ExternalSave>>,
  TError,
  { data: ApiRepresentationForSave },
  TContext
> => {
  const mutationKey = ['postV1ExternalSave'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ExternalSave>>,
    { data: ApiRepresentationForSave }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ExternalSave(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ExternalSaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ExternalSave>>
>;
export type PostV1ExternalSaveMutationBody = ApiRepresentationForSave;
export type PostV1ExternalSaveMutationError = APISaveResponseError | APISaveResponseError;

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–µ–µ API
 */
export const usePostV1ExternalSave = <
  TError = APISaveResponseError | APISaveResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ExternalSave>>,
      TError,
      { data: ApiRepresentationForSave },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ExternalSave>>,
  TError,
  { data: ApiRepresentationForSave },
  TContext
> => {
  const mutationOptions = getPostV1ExternalSaveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –≤–Ω–µ—à–Ω–µ–µ API
 */
export const putV1ExternalUpdate = (
  aPIUpdateRequest: APIUpdateRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<APIUpdateResponseSuccess>(
    {
      url: `/v1/external/update`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: aPIUpdateRequest
    },
    options
  );
};

export const getPutV1ExternalUpdateMutationOptions = <
  TError = APIUpdateResponseError | APIUpdateResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1ExternalUpdate>>,
    TError,
    { data: APIUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV1ExternalUpdate>>,
  TError,
  { data: APIUpdateRequest },
  TContext
> => {
  const mutationKey = ['putV1ExternalUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV1ExternalUpdate>>,
    { data: APIUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putV1ExternalUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1ExternalUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1ExternalUpdate>>
>;
export type PutV1ExternalUpdateMutationBody = APIUpdateRequest;
export type PutV1ExternalUpdateMutationError = APIUpdateResponseError | APIUpdateResponseError;

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –≤–Ω–µ—à–Ω–µ–µ API
 */
export const usePutV1ExternalUpdate = <
  TError = APIUpdateResponseError | APIUpdateResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putV1ExternalUpdate>>,
      TError,
      { data: APIUpdateRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putV1ExternalUpdate>>,
  TError,
  { data: APIUpdateRequest },
  TContext
> => {
  const mutationOptions = getPutV1ExternalUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –≤–Ω–µ—à–Ω–µ–µ API
 */
export const deleteV1ExternalDelete = (
  aPIDeleteRequest: APIDeleteRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<APIDeleteResponseSuccess>(
    {
      url: `/v1/external/delete`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: aPIDeleteRequest
    },
    options
  );
};

export const getDeleteV1ExternalDeleteMutationOptions = <
  TError = APIDeleteResponseError | APIDeleteResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1ExternalDelete>>,
    TError,
    { data: APIDeleteRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1ExternalDelete>>,
  TError,
  { data: APIDeleteRequest },
  TContext
> => {
  const mutationKey = ['deleteV1ExternalDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1ExternalDelete>>,
    { data: APIDeleteRequest }
  > = (props) => {
    const { data } = props ?? {};

    return deleteV1ExternalDelete(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1ExternalDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1ExternalDelete>>
>;
export type DeleteV1ExternalDeleteMutationBody = APIDeleteRequest;
export type DeleteV1ExternalDeleteMutationError = APIDeleteResponseError | APIDeleteResponseError;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –≤–Ω–µ—à–Ω–µ–µ API
 */
export const useDeleteV1ExternalDelete = <
  TError = APIDeleteResponseError | APIDeleteResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV1ExternalDelete>>,
      TError,
      { data: APIDeleteRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1ExternalDelete>>,
  TError,
  { data: APIDeleteRequest },
  TContext
> => {
  const mutationOptions = getDeleteV1ExternalDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–µ–µ API
 */
export const postV1ExternalGet = (
  aPIRequest: APIRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<APIResponseSuccess>(
    {
      url: `/v1/external/get`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: aPIRequest,
      signal
    },
    options
  );
};

export const getPostV1ExternalGetMutationOptions = <
  TError = APIResponseError | APIResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ExternalGet>>,
    TError,
    { data: APIRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ExternalGet>>,
  TError,
  { data: APIRequest },
  TContext
> => {
  const mutationKey = ['postV1ExternalGet'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ExternalGet>>,
    { data: APIRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ExternalGet(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ExternalGetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ExternalGet>>
>;
export type PostV1ExternalGetMutationBody = APIRequest;
export type PostV1ExternalGetMutationError = APIResponseError | APIResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–µ–µ API
 */
export const usePostV1ExternalGet = <
  TError = APIResponseError | APIResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ExternalGet>>,
      TError,
      { data: APIRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ExternalGet>>,
  TError,
  { data: APIRequest },
  TContext
> => {
  const mutationOptions = getPostV1ExternalGetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö API –ø–æ query
 */
export const postV1ExternalGetByName = (
  aPINamesRequest: APINamesRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<APINamesResponseSuccess>(
    {
      url: `/v1/external/getByName`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: aPINamesRequest,
      signal
    },
    options
  );
};

export const getPostV1ExternalGetByNameMutationOptions = <
  TError = APINamesResponseError | APINamesResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ExternalGetByName>>,
    TError,
    { data: APINamesRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ExternalGetByName>>,
  TError,
  { data: APINamesRequest },
  TContext
> => {
  const mutationKey = ['postV1ExternalGetByName'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ExternalGetByName>>,
    { data: APINamesRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ExternalGetByName(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ExternalGetByNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ExternalGetByName>>
>;
export type PostV1ExternalGetByNameMutationBody = APINamesRequest;
export type PostV1ExternalGetByNameMutationError = APINamesResponseError | APINamesResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö API –ø–æ query
 */
export const usePostV1ExternalGetByName = <
  TError = APINamesResponseError | APINamesResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ExternalGetByName>>,
      TError,
      { data: APINamesRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ExternalGetByName>>,
  TError,
  { data: APINamesRequest },
  TContext
> => {
  const mutationOptions = getPostV1ExternalGetByNameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
 */
export const postV1TextStyleSave = (
  textStyleSaveRequest: TextStyleSaveRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<TextStyleSaveResponseSuccess>(
    {
      url: `/v1/textStyle/save`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: textStyleSaveRequest,
      signal
    },
    options
  );
};

export const getPostV1TextStyleSaveMutationOptions = <
  TError = TextStyleSaveResponseError | TextStyleSaveResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1TextStyleSave>>,
    TError,
    { data: TextStyleSaveRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1TextStyleSave>>,
  TError,
  { data: TextStyleSaveRequest },
  TContext
> => {
  const mutationKey = ['postV1TextStyleSave'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1TextStyleSave>>,
    { data: TextStyleSaveRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1TextStyleSave(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1TextStyleSaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1TextStyleSave>>
>;
export type PostV1TextStyleSaveMutationBody = TextStyleSaveRequest;
export type PostV1TextStyleSaveMutationError =
  | TextStyleSaveResponseError
  | TextStyleSaveResponseError;

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
 */
export const usePostV1TextStyleSave = <
  TError = TextStyleSaveResponseError | TextStyleSaveResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1TextStyleSave>>,
      TError,
      { data: TextStyleSaveRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1TextStyleSave>>,
  TError,
  { data: TextStyleSaveRequest },
  TContext
> => {
  const mutationOptions = getPostV1TextStyleSaveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
 */
export const putV1TextStyleUpdate = (
  textStyleUpdateRequest: TextStyleUpdateRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<TextStyleUpdateResponseSuccess>(
    {
      url: `/v1/textStyle/update`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: textStyleUpdateRequest
    },
    options
  );
};

export const getPutV1TextStyleUpdateMutationOptions = <
  TError = TextStyleUpdateResponseError | APIUpdateResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1TextStyleUpdate>>,
    TError,
    { data: TextStyleUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV1TextStyleUpdate>>,
  TError,
  { data: TextStyleUpdateRequest },
  TContext
> => {
  const mutationKey = ['putV1TextStyleUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV1TextStyleUpdate>>,
    { data: TextStyleUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putV1TextStyleUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1TextStyleUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1TextStyleUpdate>>
>;
export type PutV1TextStyleUpdateMutationBody = TextStyleUpdateRequest;
export type PutV1TextStyleUpdateMutationError =
  | TextStyleUpdateResponseError
  | APIUpdateResponseError;

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
 */
export const usePutV1TextStyleUpdate = <
  TError = TextStyleUpdateResponseError | APIUpdateResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putV1TextStyleUpdate>>,
      TError,
      { data: TextStyleUpdateRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putV1TextStyleUpdate>>,
  TError,
  { data: TextStyleUpdateRequest },
  TContext
> => {
  const mutationOptions = getPutV1TextStyleUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
 */
export const deleteV1TextStyleDelete = (
  textStyleDeleteRequest: TextStyleDeleteRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<TextStyleDeleteResponseSuccess>(
    {
      url: `/v1/textStyle/delete`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: textStyleDeleteRequest
    },
    options
  );
};

export const getDeleteV1TextStyleDeleteMutationOptions = <
  TError = TextStyleDeleteResponseError | TextStyleDeleteResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1TextStyleDelete>>,
    TError,
    { data: TextStyleDeleteRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1TextStyleDelete>>,
  TError,
  { data: TextStyleDeleteRequest },
  TContext
> => {
  const mutationKey = ['deleteV1TextStyleDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1TextStyleDelete>>,
    { data: TextStyleDeleteRequest }
  > = (props) => {
    const { data } = props ?? {};

    return deleteV1TextStyleDelete(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1TextStyleDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1TextStyleDelete>>
>;
export type DeleteV1TextStyleDeleteMutationBody = TextStyleDeleteRequest;
export type DeleteV1TextStyleDeleteMutationError =
  | TextStyleDeleteResponseError
  | TextStyleDeleteResponseError;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
 */
export const useDeleteV1TextStyleDelete = <
  TError = TextStyleDeleteResponseError | TextStyleDeleteResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV1TextStyleDelete>>,
      TError,
      { data: TextStyleDeleteRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1TextStyleDelete>>,
  TError,
  { data: TextStyleDeleteRequest },
  TContext
> => {
  const mutationOptions = getDeleteV1TextStyleDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
 */
export const postV1TextStyleGet = (
  textStyleRequest: TextStyleRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<TextStyleResponseSuccess>(
    {
      url: `/v1/textStyle/get`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: textStyleRequest,
      signal
    },
    options
  );
};

export const getPostV1TextStyleGetMutationOptions = <
  TError = TextStyleResponseError | TextStyleResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1TextStyleGet>>,
    TError,
    { data: TextStyleRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1TextStyleGet>>,
  TError,
  { data: TextStyleRequest },
  TContext
> => {
  const mutationKey = ['postV1TextStyleGet'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1TextStyleGet>>,
    { data: TextStyleRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1TextStyleGet(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1TextStyleGetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1TextStyleGet>>
>;
export type PostV1TextStyleGetMutationBody = TextStyleRequest;
export type PostV1TextStyleGetMutationError = TextStyleResponseError | TextStyleResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞
 */
export const usePostV1TextStyleGet = <
  TError = TextStyleResponseError | TextStyleResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1TextStyleGet>>,
      TError,
      { data: TextStyleRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1TextStyleGet>>,
  TError,
  { data: TextStyleRequest },
  TContext
> => {
  const mutationOptions = getPostV1TextStyleGetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –ø–æ query
 */
export const postV1TextStyleGetByToken = (
  textStylesByTokenRequest: TextStylesByTokenRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<TextStylesByTokenResponseSuccess>(
    {
      url: `/v1/textStyle/getByToken`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: textStylesByTokenRequest,
      signal
    },
    options
  );
};

export const getPostV1TextStyleGetByTokenMutationOptions = <
  TError = TextStylesByTokenResponseError | TextStylesByTokenResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1TextStyleGetByToken>>,
    TError,
    { data: TextStylesByTokenRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1TextStyleGetByToken>>,
  TError,
  { data: TextStylesByTokenRequest },
  TContext
> => {
  const mutationKey = ['postV1TextStyleGetByToken'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1TextStyleGetByToken>>,
    { data: TextStylesByTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1TextStyleGetByToken(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1TextStyleGetByTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1TextStyleGetByToken>>
>;
export type PostV1TextStyleGetByTokenMutationBody = TextStylesByTokenRequest;
export type PostV1TextStyleGetByTokenMutationError =
  | TextStylesByTokenResponseError
  | TextStylesByTokenResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –ø–æ query
 */
export const usePostV1TextStyleGetByToken = <
  TError = TextStylesByTokenResponseError | TextStylesByTokenResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1TextStyleGetByToken>>,
      TError,
      { data: TextStylesByTokenRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1TextStyleGetByToken>>,
  TError,
  { data: TextStylesByTokenRequest },
  TContext
> => {
  const mutationOptions = getPostV1TextStyleGetByTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∏–ª—å —Ü–≤–µ—Ç–∞
 */
export const postV1ColorStyleSave = (
  colorStyleSaveRequest: ColorStyleSaveRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ColorStyleSaveResponseSuccess>(
    {
      url: `/v1/colorStyle/save`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: colorStyleSaveRequest,
      signal
    },
    options
  );
};

export const getPostV1ColorStyleSaveMutationOptions = <
  TError = ColorStyleSaveResponseError | ColorStyleSaveResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ColorStyleSave>>,
    TError,
    { data: ColorStyleSaveRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ColorStyleSave>>,
  TError,
  { data: ColorStyleSaveRequest },
  TContext
> => {
  const mutationKey = ['postV1ColorStyleSave'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ColorStyleSave>>,
    { data: ColorStyleSaveRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ColorStyleSave(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ColorStyleSaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ColorStyleSave>>
>;
export type PostV1ColorStyleSaveMutationBody = ColorStyleSaveRequest;
export type PostV1ColorStyleSaveMutationError =
  | ColorStyleSaveResponseError
  | ColorStyleSaveResponseError;

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∏–ª—å —Ü–≤–µ—Ç–∞
 */
export const usePostV1ColorStyleSave = <
  TError = ColorStyleSaveResponseError | ColorStyleSaveResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ColorStyleSave>>,
      TError,
      { data: ColorStyleSaveRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ColorStyleSave>>,
  TError,
  { data: ColorStyleSaveRequest },
  TContext
> => {
  const mutationOptions = getPostV1ColorStyleSaveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å —Ü–≤–µ—Ç–∞
 */
export const putV1ColorStyleUpdate = (
  colorStyleUpdateRequest: ColorStyleUpdateRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<ColorStyleUpdateResponseSuccess>(
    {
      url: `/v1/colorStyle/update`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: colorStyleUpdateRequest
    },
    options
  );
};

export const getPutV1ColorStyleUpdateMutationOptions = <
  TError = ColorStyleUpdateResponseError | ColorStyleUpdateResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1ColorStyleUpdate>>,
    TError,
    { data: ColorStyleUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV1ColorStyleUpdate>>,
  TError,
  { data: ColorStyleUpdateRequest },
  TContext
> => {
  const mutationKey = ['putV1ColorStyleUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV1ColorStyleUpdate>>,
    { data: ColorStyleUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putV1ColorStyleUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1ColorStyleUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1ColorStyleUpdate>>
>;
export type PutV1ColorStyleUpdateMutationBody = ColorStyleUpdateRequest;
export type PutV1ColorStyleUpdateMutationError =
  | ColorStyleUpdateResponseError
  | ColorStyleUpdateResponseError;

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å —Ü–≤–µ—Ç–∞
 */
export const usePutV1ColorStyleUpdate = <
  TError = ColorStyleUpdateResponseError | ColorStyleUpdateResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putV1ColorStyleUpdate>>,
      TError,
      { data: ColorStyleUpdateRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putV1ColorStyleUpdate>>,
  TError,
  { data: ColorStyleUpdateRequest },
  TContext
> => {
  const mutationOptions = getPutV1ColorStyleUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª—å —Ü–≤–µ—Ç–∞
 */
export const deleteV1ColorStyleDelete = (
  colorStyleDeleteRequest: ColorStyleDeleteRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<ColorStyleDeleteResponseSuccess>(
    {
      url: `/v1/colorStyle/delete`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: colorStyleDeleteRequest
    },
    options
  );
};

export const getDeleteV1ColorStyleDeleteMutationOptions = <
  TError = ColorStyleDeleteResponseError | ColorStyleDeleteResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1ColorStyleDelete>>,
    TError,
    { data: ColorStyleDeleteRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1ColorStyleDelete>>,
  TError,
  { data: ColorStyleDeleteRequest },
  TContext
> => {
  const mutationKey = ['deleteV1ColorStyleDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1ColorStyleDelete>>,
    { data: ColorStyleDeleteRequest }
  > = (props) => {
    const { data } = props ?? {};

    return deleteV1ColorStyleDelete(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1ColorStyleDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1ColorStyleDelete>>
>;
export type DeleteV1ColorStyleDeleteMutationBody = ColorStyleDeleteRequest;
export type DeleteV1ColorStyleDeleteMutationError =
  | ColorStyleDeleteResponseError
  | ColorStyleDeleteResponseError;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª—å —Ü–≤–µ—Ç–∞
 */
export const useDeleteV1ColorStyleDelete = <
  TError = ColorStyleDeleteResponseError | ColorStyleDeleteResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV1ColorStyleDelete>>,
      TError,
      { data: ColorStyleDeleteRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1ColorStyleDelete>>,
  TError,
  { data: ColorStyleDeleteRequest },
  TContext
> => {
  const mutationOptions = getDeleteV1ColorStyleDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ª—å —Ü–≤–µ—Ç–∞
 */
export const postV1ColorStyleGet = (
  colorStyleRequest: ColorStyleRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ColorStyleResponseSuccess>(
    {
      url: `/v1/colorStyle/get`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: colorStyleRequest,
      signal
    },
    options
  );
};

export const getPostV1ColorStyleGetMutationOptions = <
  TError = ColorStyleResponseError | ColorStyleResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ColorStyleGet>>,
    TError,
    { data: ColorStyleRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ColorStyleGet>>,
  TError,
  { data: ColorStyleRequest },
  TContext
> => {
  const mutationKey = ['postV1ColorStyleGet'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ColorStyleGet>>,
    { data: ColorStyleRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ColorStyleGet(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ColorStyleGetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ColorStyleGet>>
>;
export type PostV1ColorStyleGetMutationBody = ColorStyleRequest;
export type PostV1ColorStyleGetMutationError = ColorStyleResponseError | ColorStyleResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ª—å —Ü–≤–µ—Ç–∞
 */
export const usePostV1ColorStyleGet = <
  TError = ColorStyleResponseError | ColorStyleResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ColorStyleGet>>,
      TError,
      { data: ColorStyleRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ColorStyleGet>>,
  TError,
  { data: ColorStyleRequest },
  TContext
> => {
  const mutationOptions = getPostV1ColorStyleGetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤ –ø–æ query
 */
export const postV1ColorStyleGetByToken = (
  colorStylesByTokenRequest: ColorStylesByTokenRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ColorStylesByTokenResponseSuccess>(
    {
      url: `/v1/colorStyle/getByToken`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: colorStylesByTokenRequest,
      signal
    },
    options
  );
};

export const getPostV1ColorStyleGetByTokenMutationOptions = <
  TError = ColorStylesByTokenResponseError | ColorStylesByTokenResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ColorStyleGetByToken>>,
    TError,
    { data: ColorStylesByTokenRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ColorStyleGetByToken>>,
  TError,
  { data: ColorStylesByTokenRequest },
  TContext
> => {
  const mutationKey = ['postV1ColorStyleGetByToken'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ColorStyleGetByToken>>,
    { data: ColorStylesByTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ColorStyleGetByToken(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ColorStyleGetByTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ColorStyleGetByToken>>
>;
export type PostV1ColorStyleGetByTokenMutationBody = ColorStylesByTokenRequest;
export type PostV1ColorStyleGetByTokenMutationError =
  | ColorStylesByTokenResponseError
  | ColorStylesByTokenResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤ –ø–æ query
 */
export const usePostV1ColorStyleGetByToken = <
  TError = ColorStylesByTokenResponseError | ColorStylesByTokenResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ColorStyleGetByToken>>,
      TError,
      { data: ColorStylesByTokenRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ColorStyleGetByToken>>,
  TError,
  { data: ColorStylesByTokenRequest },
  TContext
> => {
  const mutationOptions = getPostV1ColorStyleGetByTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
 */
export const postV1CommandSave = (
  commandSaveRequest: CommandSaveRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<CommandSaveResponseSuccess>(
    {
      url: `/v1/command/save`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: commandSaveRequest,
      signal
    },
    options
  );
};

export const getPostV1CommandSaveMutationOptions = <
  TError = CommandSaveResponseError | CommandSaveResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1CommandSave>>,
    TError,
    { data: CommandSaveRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1CommandSave>>,
  TError,
  { data: CommandSaveRequest },
  TContext
> => {
  const mutationKey = ['postV1CommandSave'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1CommandSave>>,
    { data: CommandSaveRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1CommandSave(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1CommandSaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1CommandSave>>
>;
export type PostV1CommandSaveMutationBody = CommandSaveRequest;
export type PostV1CommandSaveMutationError = CommandSaveResponseError | CommandSaveResponseError;

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
 */
export const usePostV1CommandSave = <
  TError = CommandSaveResponseError | CommandSaveResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1CommandSave>>,
      TError,
      { data: CommandSaveRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1CommandSave>>,
  TError,
  { data: CommandSaveRequest },
  TContext
> => {
  const mutationOptions = getPostV1CommandSaveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
 */
export const putV1CommandUpdate = (
  commandUpdateRequest: CommandUpdateRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<CommandUpdateResponseSuccess>(
    {
      url: `/v1/command/update`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: commandUpdateRequest
    },
    options
  );
};

export const getPutV1CommandUpdateMutationOptions = <
  TError = CommandUpdateResponseError | CommandUpdateResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1CommandUpdate>>,
    TError,
    { data: CommandUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV1CommandUpdate>>,
  TError,
  { data: CommandUpdateRequest },
  TContext
> => {
  const mutationKey = ['putV1CommandUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV1CommandUpdate>>,
    { data: CommandUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putV1CommandUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1CommandUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1CommandUpdate>>
>;
export type PutV1CommandUpdateMutationBody = CommandUpdateRequest;
export type PutV1CommandUpdateMutationError =
  | CommandUpdateResponseError
  | CommandUpdateResponseError;

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
 */
export const usePutV1CommandUpdate = <
  TError = CommandUpdateResponseError | CommandUpdateResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putV1CommandUpdate>>,
      TError,
      { data: CommandUpdateRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putV1CommandUpdate>>,
  TError,
  { data: CommandUpdateRequest },
  TContext
> => {
  const mutationOptions = getPutV1CommandUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
 */
export const deleteV1CommandDelete = (
  commandDeleteRequest: CommandDeleteRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<CommandDeleteResponseSuccess>(
    {
      url: `/v1/command/delete`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: commandDeleteRequest
    },
    options
  );
};

export const getDeleteV1CommandDeleteMutationOptions = <
  TError = CommandDeleteResponseError | CommandDeleteResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1CommandDelete>>,
    TError,
    { data: CommandDeleteRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1CommandDelete>>,
  TError,
  { data: CommandDeleteRequest },
  TContext
> => {
  const mutationKey = ['deleteV1CommandDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1CommandDelete>>,
    { data: CommandDeleteRequest }
  > = (props) => {
    const { data } = props ?? {};

    return deleteV1CommandDelete(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1CommandDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1CommandDelete>>
>;
export type DeleteV1CommandDeleteMutationBody = CommandDeleteRequest;
export type DeleteV1CommandDeleteMutationError =
  | CommandDeleteResponseError
  | CommandDeleteResponseError;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
 */
export const useDeleteV1CommandDelete = <
  TError = CommandDeleteResponseError | CommandDeleteResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV1CommandDelete>>,
      TError,
      { data: CommandDeleteRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1CommandDelete>>,
  TError,
  { data: CommandDeleteRequest },
  TContext
> => {
  const mutationOptions = getDeleteV1CommandDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
 */
export const postV1CommandGet = (
  commandRequest: CommandRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<CommandResponseSuccess>(
    {
      url: `/v1/command/get`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: commandRequest,
      signal
    },
    options
  );
};

export const getPostV1CommandGetMutationOptions = <
  TError = CommandResponseError | CommandResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1CommandGet>>,
    TError,
    { data: CommandRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1CommandGet>>,
  TError,
  { data: CommandRequest },
  TContext
> => {
  const mutationKey = ['postV1CommandGet'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1CommandGet>>,
    { data: CommandRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1CommandGet(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1CommandGetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1CommandGet>>
>;
export type PostV1CommandGetMutationBody = CommandRequest;
export type PostV1CommandGetMutationError = CommandResponseError | CommandResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
 */
export const usePostV1CommandGet = <
  TError = CommandResponseError | CommandResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1CommandGet>>,
      TError,
      { data: CommandRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1CommandGet>>,
  TError,
  { data: CommandRequest },
  TContext
> => {
  const mutationOptions = getPostV1CommandGetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ query –Ω–∞–∑–≤–∞–Ω–∏—é
 */
export const postV1CommandGetByName = (
  commandsByNameRequest: CommandsByNameRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<CommandsByNameResponseSuccess>(
    {
      url: `/v1/command/getByName`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: commandsByNameRequest,
      signal
    },
    options
  );
};

export const getPostV1CommandGetByNameMutationOptions = <
  TError = CommandsByNameResponseError | CommandsByNameResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1CommandGetByName>>,
    TError,
    { data: CommandsByNameRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1CommandGetByName>>,
  TError,
  { data: CommandsByNameRequest },
  TContext
> => {
  const mutationKey = ['postV1CommandGetByName'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1CommandGetByName>>,
    { data: CommandsByNameRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1CommandGetByName(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1CommandGetByNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1CommandGetByName>>
>;
export type PostV1CommandGetByNameMutationBody = CommandsByNameRequest;
export type PostV1CommandGetByNameMutationError =
  | CommandsByNameResponseError
  | CommandsByNameResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ query –Ω–∞–∑–≤–∞–Ω–∏—é
 */
export const usePostV1CommandGetByName = <
  TError = CommandsByNameResponseError | CommandsByNameResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1CommandGetByName>>,
      TError,
      { data: CommandsByNameRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1CommandGetByName>>,
  TError,
  { data: CommandsByNameRequest },
  TContext
> => {
  const mutationOptions = getPostV1CommandGetByNameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export const postV1TemplateSave = (
  templateSaveRequest: TemplateSaveRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<TemplateSaveResponseSuccess>(
    {
      url: `/v1/template/save`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: templateSaveRequest,
      signal
    },
    options
  );
};

export const getPostV1TemplateSaveMutationOptions = <
  TError = TemplateSaveResponseError | TemplateSaveResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1TemplateSave>>,
    TError,
    { data: TemplateSaveRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1TemplateSave>>,
  TError,
  { data: TemplateSaveRequest },
  TContext
> => {
  const mutationKey = ['postV1TemplateSave'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1TemplateSave>>,
    { data: TemplateSaveRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1TemplateSave(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1TemplateSaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1TemplateSave>>
>;
export type PostV1TemplateSaveMutationBody = TemplateSaveRequest;
export type PostV1TemplateSaveMutationError = TemplateSaveResponseError | TemplateSaveResponseError;

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export const usePostV1TemplateSave = <
  TError = TemplateSaveResponseError | TemplateSaveResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1TemplateSave>>,
      TError,
      { data: TemplateSaveRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1TemplateSave>>,
  TError,
  { data: TemplateSaveRequest },
  TContext
> => {
  const mutationOptions = getPostV1TemplateSaveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export const putV1TemplateUpdate = (
  templateUpdateRequest: TemplateUpdateRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<TemplateUpdateResponseSuccess>(
    {
      url: `/v1/template/update`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: templateUpdateRequest
    },
    options
  );
};

export const getPutV1TemplateUpdateMutationOptions = <
  TError = TemplateUpdateResponseError | TemplateUpdateResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1TemplateUpdate>>,
    TError,
    { data: TemplateUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV1TemplateUpdate>>,
  TError,
  { data: TemplateUpdateRequest },
  TContext
> => {
  const mutationKey = ['putV1TemplateUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV1TemplateUpdate>>,
    { data: TemplateUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putV1TemplateUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1TemplateUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1TemplateUpdate>>
>;
export type PutV1TemplateUpdateMutationBody = TemplateUpdateRequest;
export type PutV1TemplateUpdateMutationError =
  | TemplateUpdateResponseError
  | TemplateUpdateResponseError;

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export const usePutV1TemplateUpdate = <
  TError = TemplateUpdateResponseError | TemplateUpdateResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putV1TemplateUpdate>>,
      TError,
      { data: TemplateUpdateRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putV1TemplateUpdate>>,
  TError,
  { data: TemplateUpdateRequest },
  TContext
> => {
  const mutationOptions = getPutV1TemplateUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω
 */
export const deleteV1TemplateDelete = (
  templateDeleteRequest: TemplateDeleteRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<TemplateDeleteResponseSuccess>(
    {
      url: `/v1/template/delete`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: templateDeleteRequest
    },
    options
  );
};

export const getDeleteV1TemplateDeleteMutationOptions = <
  TError = TemplateDeleteResponseError | TemplateDeleteResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1TemplateDelete>>,
    TError,
    { data: TemplateDeleteRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1TemplateDelete>>,
  TError,
  { data: TemplateDeleteRequest },
  TContext
> => {
  const mutationKey = ['deleteV1TemplateDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1TemplateDelete>>,
    { data: TemplateDeleteRequest }
  > = (props) => {
    const { data } = props ?? {};

    return deleteV1TemplateDelete(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1TemplateDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1TemplateDelete>>
>;
export type DeleteV1TemplateDeleteMutationBody = TemplateDeleteRequest;
export type DeleteV1TemplateDeleteMutationError =
  | TemplateDeleteResponseError
  | TemplateDeleteResponseError;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω
 */
export const useDeleteV1TemplateDelete = <
  TError = TemplateDeleteResponseError | TemplateDeleteResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV1TemplateDelete>>,
      TError,
      { data: TemplateDeleteRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1TemplateDelete>>,
  TError,
  { data: TemplateDeleteRequest },
  TContext
> => {
  const mutationOptions = getDeleteV1TemplateDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω
 */
export const postV1TemplateGet = (
  templateRequest: TemplateRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<TemplateResponseSuccess>(
    {
      url: `/v1/template/get`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: templateRequest,
      signal
    },
    options
  );
};

export const getPostV1TemplateGetMutationOptions = <
  TError = TemplateResponseError | TemplateResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1TemplateGet>>,
    TError,
    { data: TemplateRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1TemplateGet>>,
  TError,
  { data: TemplateRequest },
  TContext
> => {
  const mutationKey = ['postV1TemplateGet'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1TemplateGet>>,
    { data: TemplateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1TemplateGet(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1TemplateGetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1TemplateGet>>
>;
export type PostV1TemplateGetMutationBody = TemplateRequest;
export type PostV1TemplateGetMutationError = TemplateResponseError | TemplateResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω
 */
export const usePostV1TemplateGet = <
  TError = TemplateResponseError | TemplateResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1TemplateGet>>,
      TError,
      { data: TemplateRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1TemplateGet>>,
  TError,
  { data: TemplateRequest },
  TContext
> => {
  const mutationOptions = getPostV1TemplateGetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ query –Ω–∞–∑–≤–∞–Ω–∏—é
 */
export const postV1TemplateGetByName = (
  templatesByNameRequest: TemplatesByNameRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<TemplatesByNameResponseSuccess>(
    {
      url: `/v1/template/getByName`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: templatesByNameRequest,
      signal
    },
    options
  );
};

export const getPostV1TemplateGetByNameMutationOptions = <
  TError = TemplatesByNameResponseError | TemplatesByNameResponseError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1TemplateGetByName>>,
    TError,
    { data: TemplatesByNameRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1TemplateGetByName>>,
  TError,
  { data: TemplatesByNameRequest },
  TContext
> => {
  const mutationKey = ['postV1TemplateGetByName'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1TemplateGetByName>>,
    { data: TemplatesByNameRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1TemplateGetByName(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1TemplateGetByNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1TemplateGetByName>>
>;
export type PostV1TemplateGetByNameMutationBody = TemplatesByNameRequest;
export type PostV1TemplateGetByNameMutationError =
  | TemplatesByNameResponseError
  | TemplatesByNameResponseError;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ query –Ω–∞–∑–≤–∞–Ω–∏—é
 */
export const usePostV1TemplateGetByName = <
  TError = TemplatesByNameResponseError | TemplatesByNameResponseError,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1TemplateGetByName>>,
      TError,
      { data: TemplatesByNameRequest },
      TContext
    >;
    request?: SecondParameter<typeof getInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postV1TemplateGetByName>>,
  TError,
  { data: TemplatesByNameRequest },
  TContext
> => {
  const mutationOptions = getPostV1TemplateGetByNameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
